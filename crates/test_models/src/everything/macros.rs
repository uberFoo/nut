//! Macros for navigating the "Everything" domain
//!
//! # Generated Code -- edit _with care_.
//!
//! Don't mess with anything between `{"magic":"Óû®","kind":"CriticalBlockBegin"}`
//! and `{"magic":"Óû®","kind":"CriticalBlockEnd"}`. Otherwise, you should be free
//! to go wild. Happy hacking!
//!
//! Use the following invocation to reproduce:
// {"magic":"Óû®","kind":{"IgnoreBlockBegin":{}}}
//! ```shell
//!  /Users/uberfoo/projects/sarzak/nut/target/debug/deps/generate_test_domain-145fdb9ab1f4b4be --nocapture
//! ```
// {"magic":"Óû®","kind":"IgnoreBlockEnd"}
// {"magic":"Óû®","version":"0.2.0"}
// {"magic":"Óû®","version":"0.5.0"}
// {"magic":"Óû®","version":"1.0.0"}

/// Macro to traverse [`Everything`][ü¶Ä] ‚û° [`RandoObject`][ü¶û], via _R1_
///
/// This macro expects a &[`Everything`][ü¶Ä], and returns a &[`RandoObject`][ü¶û].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ü¶Ä]: crate::everything::types::Everything
/// [ü¶û]: crate::everything::types::RandoObject
// {"magic":"Óû®","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use test_models::everything::RandoObject;
/// # use test_models::everything::Everything;
/// # use test_models::everything_get_one_ro_across_r1;
/// # let mut store = test_models::everything::ObjectStore::new();
///
/// let rando_object_bub = RandoObject::new(&mut store);
/// let troubled_holiday = "living_net".to_owned();
///
/// let everything = Everything::new(&mut store, &rando_object_bub, 42, true, 42.0, troubled_holiday);
///
/// let rando_object_bfx = everything_get_one_ro_across_r1!(everything, store);
/// assert_eq!(&rando_object_bub, rando_object_bfx);
///```
// {"magic":"Óû®","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"Óû®","kind":{"CriticalBlockBegin":{"tag":"everything_get_one_ro_across_r1-emit_binary_main"}}}
macro_rules! everything_get_one_ro_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"Óû®","kind":{"CriticalBlockBegin":{"tag":"rando_object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_rando_object(&$input.rando).unwrap()
        // {"magic":"Óû®","kind":{"CriticalBlockEnd":{"tag":"rando_object-emit_one_unconditional"}}}
    }};
}
pub use everything_get_one_ro_across_r1;
// {"magic":"Óû®","kind":{"CriticalBlockEnd":{"tag":"everything_get_one_ro_across_r1-emit_binary_main"}}}

/// Macro to traverse [`RandoObject`][ü¶Ä] ‚û° [`Everything`][ü¶û], via _R1_
///
/// This macro expects a &[`RandoObject`][ü¶Ä], and returns a &[`Everything`][ü¶û].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ü¶Ä]: crate::everything::types::RandoObject
/// [ü¶û]: crate::everything::types::Everything
// {"magic":"Óû®","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use test_models::everything::Everything;
/// # use test_models::everything::RandoObject;
/// # use test_models::everything_get_one_e_across_r1;
/// # let mut store = test_models::everything::ObjectStore::new();
///
/// let rando_object_tie = RandoObject::new(&mut store);
/// let plant_substance = "quarrelsome_wilderness".to_owned();
///
/// let everything = Everything::new(&mut store, &rando_object_tie, 42, true, 42.0, plant_substance);
/// let everything_amk = everything_get_one_e_across_r1!(rando_object_tie, store);
///
/// assert_eq!(&everything, everything_amk);
///```
// {"magic":"Óû®","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"Óû®","kind":{"CriticalBlockBegin":{"tag":"everything_get_one_e_across_r1-emit_binary_main"}}}
macro_rules! everything_get_one_e_across_r1 {
    ($input:expr, $store:expr) => {{
//         // {"magic":"Óû®","kind":"CriticalBlockBegin"} //‚ö°Ô∏è
//         // {"magic":"Óû®","kind":{"CriticalBlockBegin":"rando_object-everything-emit_one_unconditional_lookup"}} //‚ö°Ô∏è
        // {"magic":"Óû®","kind":{"CriticalBlockBegin":{"tag":"rando_object-everything-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_everything()
            .find(|z| z.1.rando == $input.id)
            .map(|z| z.1)
            .unwrap()
// ‚ö°Ô∏è         // {"magic":"Óû®","kind":"CriticalBlockEnd"}
// ‚ö°Ô∏è             // {"magic":"Óû®","kind":{"CriticalBlockEnd":"rando_object-everything-emit_one_unconditional_lookup"}}
//             // {"magic":"Óû®","kind":{"CriticalBlockEnd":{"tag":"rando_object-everything-emit_one_unconditional_lookup"}}} //‚ö°Ô∏è
        // {"magic":"Óû®","kind":{"CriticalBlockEnd":{"tag":"rando_object-everything-emit_one_unconditional_lookup"}}}
    }};
}
pub use everything_get_one_e_across_r1;
// {"magic":"Óû®","kind":{"CriticalBlockEnd":{"tag":"everything_get_one_e_across_r1-emit_binary_main"}}}
