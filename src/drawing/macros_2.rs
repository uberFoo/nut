//! Macros for navigation the Drawing domain
//!
//! Generated Code -- do not edit
//! Use the following invocation to reproduce.
//! ```ignore
//!  target/debug/gen_macro_drawing models/drawing_2.json src/drawing/macros_2.rs
//! ```

/// Macro to traverse BinaryUI ➡ Binary, via R12
///
/// This macro expects an `&BinaryUI`, and returns a `(&Uuid, &Binary)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_r_bin_across_r12 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Binary;
    }};
}

/// Macro to traverse IsaUI ➡ Anchor, via R9
///
/// This macro expects an `&IsaUI`, and returns a `(&Uuid, &Anchor)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_anch_across_r9 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Anchor;
    }};
}

/// ❌ Macro to traverse ObjectUI ➡ Edge, via R14
///
/// This macro expects an `&ObjectUI`, and returns a `Vec<(&Uuid, &Edge)>`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_many_edg_across_r14 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Edge;
        let mut result = Vec::new();
        for z in &$input.1.edges {
            let edges = $store.drawing.exhume_edge(&z).unwrap();
            result.push(edges);
        }
        result
    }};
}

/// Macro to traverse BinaryUI ➡ Anchor, via R8
///
/// This macro expects an `&BinaryUI`, and returns a `(&Uuid, &Anchor)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_anch_across_r8 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Anchor;
    }};
}

/// Macro to traverse Anchor ➡ Edge, via R3(c)
///
/// This macro expects an `&Anchor`, and returns a `Option<(&Uuid, &Edge>`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! maybe_get_one_edg_across_r3 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Edge;
        $store.drawing.exhume_edge(&$input.1.edge)
    }};
}

/// ❌ Macro to traverse IsaUI ➡ Anchor, via R10
///
/// This macro expects an `&IsaUI`, and returns a `Vec<(&Uuid, &Anchor)>`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_many_anch_across_r10 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Anchor;
        let mut result = Vec::new();
        for z in &$input.1.to {
            let to = $store.drawing.exhume_anchor(&z).unwrap();
            result.push(to);
        }
        result
    }};
}

/// Macro to traverse Anchor ➡ Point, via R5
///
/// This macro expects an `&Anchor`, and returns a `(&Uuid, &Point)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_pnt_across_r5 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Point;
    }};
}

/// Macro to traverse BinaryUI ➡ Anchor, via R7
///
/// This macro expects an `&BinaryUI`, and returns a `(&Uuid, &Anchor)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_anch_across_r7 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Anchor;
    }};
}

/// Macro to traverse Anchor ➡ Point, via R4
///
/// This macro expects an `&Anchor`, and returns a `(&Uuid, &Point)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_pnt_across_r4 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Point;
    }};
}

/// Macro to traverse ObjectUI ➡ Point, via R13
///
/// This macro expects an `&ObjectUI`, and returns a `(&Uuid, &Point)`.
///
/// Generated by `generate_binary_macro_referrer_to_referent_imp`
#[macro_export]
macro_rules! get_one_pnt_across_r13 {
    ($input:expr, $store:expr) => {{
        use nut::drawing::Point;
    }};
}
